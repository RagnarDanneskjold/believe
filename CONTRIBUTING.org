Below are described a few guidelines to contribute to this project. It
is important to follow them to avoid confusion when contributing.

* Code contribution guidelines

1. /This is a literate program./\\
   The meaning of this statement is that the software is primarily
   written as a prose with code blocks. So the way to make an addition
   to Believe is to open a section on the relevant part and add a code
   block with a proper code explanation in prose.
2. /The code is written as a C code file./\\
   Any new code should be added in a proper C code block. In the end,
   all C code blocks can be tangled into a single =believe.c= file.
3. /The code uses indentation similar to K&R./\\
   Therefore we put types one line above the rest of the function
   declaration (except for prototypes), and we put the function
   declaration braces on /the next line/. As for code inside function
   scopes, the braces should be in front of the block declaration,
   separated by a single space.
4. /Use =snake_case= and respect naming conventions./\\
   All definitions use snake case with lowercase names (e.g. =bel_car=),
   except for /enumerations/ (where the name of the =enum= and its
   definitions must be uppercase -- e.g. =BEL_SYMBOL=) and /structs/ (the
   default =struct= definition must be uppercase, while a typedef for
   the =struct= must be lowercase with the first letter in uppercase --
   e.g. =Bel_pair=).
5. /Indentation must be done with spaces, and each indentation level
   takes four spaces./\\
   Though this is mostly arbitrary, this is the way most of the
   software was written. This rule is invalid for /Makefiles/ only,
   where the use of /tabs/ is relevant.
6. /Do not change the code file directly./\\
   Files such as =believe.c= are automatically generated by tangling the
   code blocks in this file. When creating /pull requests/, it is also
   desired that the =believe.c= file is not commited with the rest of
   the changes.
7. /Code without a relevant prose explaining the rationale of what was
   programmed will not be accepted as contribution./\\
   The rationale behind this project is partly related to providing
   a didatic implementation of a Lisp interpreter, which can be read
   as a book and implemented by anyone.

These contribution guidelines are subject to change at any time during
the software development, as any necessity to clear up confusion
appears.

* Project communication guidelines

This project does not have a code of conduct. Instead, we rely on the
spirit of joyful creation of the participants and on the understanding
and cordiality of the people taking part on the project.

By contributing, you understand that the project maintainers are in no
way responsible for the misconduct of any participants outside of the
scope of this project. In addition, any contributions will be
discussed in the light of good faith, not taking into consideration
personal aspects such as race, skin color, gender, political views, or
any other aspect which is unrelated to the produced code
itself. Having said that, any harrassment will not be tolerated, as it
is out of the scope of the project; the maintainers of the project
will handle the situation in the best possible manner they can.

The maintainers may also remove any other /off-topic/ discussions which
are completely unrelated to the subject, to avoid pollution on issues,
pull requests and such.

It is also important to state that, by contributing, you will also be
relying on the good faith and sensibility of the project maintainers
to handle the topics above described; again, these are stated merely
as a general mentality of moderation, and not as fixed rules which
could be circumvented.

To increment this general mentality, we also follow the GNU Kind
Communication Guidelines[fn:4], which are not a code of conduct nor a
list of rules as well, but more of a reference on how one could
approach the discussions and contributions on this software. These
guidelines are reproduced below in an adapted fashion, with a few
changes to accomodate to this project.

1. Please assume other participants are posting in good faith, even if
   you disagree with what they say. When people present code or text
   as their own work, please accept it as their work. Please do not
   criticize people for wrongs that you only speculate they may have
   done; stick to what they actually say and actually do.
2. Please think about how to treat other participants with respect,
   especially when you disagree with them. For instance, call them by
   the names they use, and honor their preferences about their gender
   identity[fn:5].
3. Please do not take a harsh tone towards other participants, and
   especially don't make personal attacks against them. Go out of your
   way to show that you are criticizing a statement, not a person.
4. Please recognize that criticism of your statements is not a personal
   attack on you. If you feel that someone has attacked you, or
   offended your personal dignity, please don't “hit back” with another
   personal attack. That tends to start a vicious circle of escalating
   verbal aggression. A private response, politely stating your
   feelings as feelings, and asking for peace, may calm things
   down. Write it, set it aside for hours or a day, revise it to remove
   the anger, and only then send it.
5. Please avoid statements about the presumed typical desires,
   capabilities or actions of some demographic group. They can offend
   people in that group, and they are always off-topic in Believe
   discussions.
6. Please be especially kind to other contributors when saying they
   made a mistake. Programming means making lots of mistakes, and we
   all do so —- this is why regression tests are useful. Conscientious
   programmers make mistakes, and then fix them. It is helpful to show
   contributors that being imperfect is normal, so we don't hold it
   against them, and that we appreciate their imperfect contributions
   though we hope they follow through by fixing any problems in them.
7. Likewise, be kind when pointing out to other contributors that they
   should stop using certain software. We welcome their contributions
   to our software even if they don't do that. So these reminders
   should be gentle and not too frequent —- don't nag.
8. Please respond to what people actually said, not to exaggerations of
   their views. Your criticism will not be constructive if it is aimed
   at a target other than their real views.
9. If in a discussion someone brings up a tangent to the topic at hand,
   please keep the discussion on track by focusing on the current topic
   rather than the tangent. This is not to say that the tangent is bad,
   or not interesting to discuss —- only that it shouldn't interfere
   with discussion of the issue at hand. In most cases, it is also
   off-topic, so those interested ought to discuss it somewhere else.\\
   If you think the tangent is an important and pertinent issue, please
   bring it up as a separate discussion, if it applies to Believe
   development.
10. Rather than trying to have the last word, look for the times when
    there is no need to reply, perhaps because you already made the
    relevant point clear enough. If you know something about the game of
    Go, this analogy might clarify that: when the other player's move is
    not strong enough to require a direct response, it is advantageous
    to give it none and instead move elsewhere.
11. Please don't argue unceasingly for your preferred course of action
    when a decision for some other course has already been made. That
    tends to block the activity's progress.
12. If other participants complain about the way you express your ideas,
    please make an effort to cater to them. You can find ways to express
    the same points while making others more comfortable. You are more
    likely to persuade others if you don't arouse ire about secondary
    things.
13. Please don't raise /any/ political issues in Believe discussions,
    because they are off-topic.

These communication guidelines are subject to change at any time
during the software development, as any necessity to clear up
confusion appears.
* Footnotes

[fn:4] https://www.gnu.org/philosophy/kind-communication.html

[fn:5] Please see the GNU Kind Communication Guidelines for more
information on better usage of pronouns and such. Maintainers will not
be /enforcing/ the usage of particular pronouns, but any misuse of
language for blatant purpose of offense will not be tolerated, as it
can easily take a discussion to an /off-topic/ argument. Finally, always
assume that any confusion about pronoun usage from the participants
was commited with no offending intention as well, and let the
maintainers handle the situation if necessary.
